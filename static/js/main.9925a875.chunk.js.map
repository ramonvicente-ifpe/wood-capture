{"version":3,"sources":["firebase/firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","handleChange","e","target","files","setState","image","downloadURL","URL","createObjectURL","console","log","state","progress","handleUpload","file","uploadTask","storage","ref","child","name","Date","now","put","database","firestore","on","TaskEvent","STATE_CHANGED","snapshot","Math","round","bytesTransferred","totalBytes","error","getDownloadURL","then","url","collection","add","document","getElementById","value","catch","Container","Row","className","Jumbotron","Col","md","src","this","alt","height","width","type","placeholder","id","onChange","Button","onClick","ProgressBar","animated","label","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9925a875.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD9WEwYy9tUo_gG7P5lwCuIt4aT-LghobM\",\n  authDomain: \"wood-capture.firebaseapp.com\",\n  projectId: \"wood-capture\",\n  storageBucket: \"wood-capture.appspot.com\",\n  messagingSenderId: \"338981321175\",\n  appId: \"1:338981321175:web:806c30bfcf31e19c237392\",\n  measurementId: \"G-0Q15X74W4G\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react'\nimport './App.css';\nimport firebase from \"./firebase/firebase\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      image: null,\n      progress:0,\n      downloadURL: null\n    }\n  }\n\n\n  handleChange = (e) =>{\n    if(e.target.files[0]){\n      this.setState({\n      image: e.target.files[0]\n    })\n    this.setState({\n      downloadURL: URL.createObjectURL(e.target.files[0])\n    })\n  }\n    console.log(this.state.progress)\n}\n\nhandleUpload = () =>{\n  // console.log(this.state.image);\n  let file = this.state.image;\n  var storage = firebase.storage();\n  var storageRef = storage.ref();\n  var uploadTask = storageRef.child('folder/' + file.name + Date.now()).put(file);\n  var database = firebase.firestore();\n\n  uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\n    (snapshot) =>{\n      var progress = Math.round((snapshot.bytesTransferred/snapshot.totalBytes))*100\n      this.setState({progress})\n    },(error) =>{\n      throw error\n    },() =>{\n      // uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) =>{\n\n    uploadTask.snapshot.ref.getDownloadURL().then((url) =>{\n      this.setState({\n        downloadURL: url\n      })\n      database.collection(\"woods\").add({\n        name: document.getElementById(\"woodName\").value,\n        image: url\n      })\n      .then(() => {\n        console.log(\"Document successfully written!\");\n      })\n      .catch((error) => {\n        console.error(\"Error writing document: \", error);\n      });\n    })\n    document.getElementById(\"file\").value = null\n\n   }\n ) \n}\n\n\n  render() {\n    return (\n      <Container>\n        <Row className=\"justify-content-center text-center\">\n          <Jumbotron>\n            <h1 className=\"\">Ol√°, seja bem vindo(a)!</h1>\n            <p>\n              Insira a imagem de uma madeira e informe seu respectivo nome para que possamos armazenar no nosso banco de dados.\n            </p>\n        </Jumbotron>\n        </Row>\n        <Row className=\"justify-content-md-center text-center\">\n            <Col md=\"8\" className=\"welcome\">\n                <img\n                  className=\"ref\"\n                  src={this.state.downloadURL || \"https://via.placeholder.com/400x300\"}\n                  alt=\"Uploaded Images\"\n                  height=\"300\"\n                  width=\"400\"\n                />\n            </Col>\n        </Row>\n        <Row className=\"justify-content-md-center  text-center mt-2\">\n          <Col md=\"8\" className=\"welcome\">\n            <input type=\"text\" placeholder=\"Nome da Madeira\" id=\"woodName\"></input>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center text-center mt-2\">\n            <Col md=\"8\" className=\"welcome\">\n            <label>\n              Escolher imagem\n              <input type=\"file\" id=\"file\" onChange={this.handleChange} />        \n            </label> {' '}\n            <Button onClick={this.handleUpload}>Cadastrar</Button>\n            </Col>\n        </Row>\n        {this.state.progress > 0 && this.state.progress <=100 ?\n        <Row className=\"justify-content-md-center text-center\">\n             <Col md=\"8\" className=\"welcome\">\n              <ProgressBar animated now={this.state.progress} label={`${this.state.progress}%`}/>\n            </Col>\n        </Row>\n        : ''}\n      </Container>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}